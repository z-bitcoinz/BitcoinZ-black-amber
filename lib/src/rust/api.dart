// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `LIGHTCLIENT`, `PROGRESS_SENDER`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `deref`, `deref`, `initialize`, `initialize`

/// Check if a wallet exists
Future<bool> walletExists({String? walletDir}) =>
    RustLib.instance.api.crateApiWalletExists(walletDir: walletDir);

/// Initialize a new wallet and return the seed phrase
Future<String> initializeNew({required String serverUri, String? walletDir}) =>
    RustLib.instance.api
        .crateApiInitializeNew(serverUri: serverUri, walletDir: walletDir);

/// Initialize a new wallet and return both seed phrase and birthday
Future<String> initializeNewWithInfo(
        {required String serverUri, String? walletDir}) =>
    RustLib.instance.api.crateApiInitializeNewWithInfo(
        serverUri: serverUri, walletDir: walletDir);

/// Initialize from an existing wallet
Future<String> initializeExisting(
        {required String serverUri, String? walletDir}) =>
    RustLib.instance.api
        .crateApiInitializeExisting(serverUri: serverUri, walletDir: walletDir);

/// Initialize from an existing wallet with birthday height
Future<String> initializeExistingWithBirthday(
        {required String serverUri,
        String? walletDir,
        required BigInt birthday}) =>
    RustLib.instance.api.crateApiInitializeExistingWithBirthday(
        serverUri: serverUri, walletDir: walletDir, birthday: birthday);

/// Initialize from seed phrase (simplified version without wallet_dir to avoid serialization issues)
Future<String> initializeFromPhraseSimple(
        {required String serverUri, required String seedPhrase}) =>
    RustLib.instance.api.crateApiInitializeFromPhraseSimple(
        serverUri: serverUri, seedPhrase: seedPhrase);

/// Initialize from seed phrase
Future<String> initializeFromPhrase(
        {required String serverUri,
        required String seedPhrase,
        required BigInt birthday,
        required bool overwrite,
        String? walletDir}) =>
    RustLib.instance.api.crateApiInitializeFromPhrase(
        serverUri: serverUri,
        seedPhrase: seedPhrase,
        birthday: birthday,
        overwrite: overwrite,
        walletDir: walletDir);

/// Execute a command (main wallet interface)
Future<String> execute({required String command, required String args}) =>
    RustLib.instance.api.crateApiExecute(command: command, args: args);

/// Deinitialize the wallet
Future<String> deinitialize() => RustLib.instance.api.crateApiDeinitialize();

/// Get sync status
String getSyncStatus() => RustLib.instance.api.crateApiGetSyncStatus();

/// Sync the wallet
Future<String> sync_() => RustLib.instance.api.crateApiSync();

/// Get balance
String getBalance() => RustLib.instance.api.crateApiGetBalance();

/// Get transaction list
String getTransactions() => RustLib.instance.api.crateApiGetTransactions();

/// Send transaction
Future<String> sendTransaction(
        {required String address,
        required PlatformInt64 amount,
        String? memo}) =>
    RustLib.instance.api
        .crateApiSendTransaction(address: address, amount: amount, memo: memo);

/// Get addresses
String getAddresses() => RustLib.instance.api.crateApiGetAddresses();

/// Generate new address
String newAddress({required String addressType}) =>
    RustLib.instance.api.crateApiNewAddress(addressType: addressType);

/// Get wallet height
int getHeight() => RustLib.instance.api.crateApiGetHeight();

/// Get info
String getInfo() => RustLib.instance.api.crateApiGetInfo();

/// Get server information using gRPC GetLightdInfo call
/// Returns JSON string with complete server details or error information
Future<String> getServerInfo({required String serverUri}) =>
    RustLib.instance.api.crateApiGetServerInfo(serverUri: serverUri);

/// Get send progress (synchronous version for polling)
String getSendProgress() => RustLib.instance.api.crateApiGetSendProgress();

/// Initialize progress stream
Future<String> initProgressStream() =>
    RustLib.instance.api.crateApiInitProgressStream();

/// Get next progress update (for stream-like polling)
Future<String> getNextProgressUpdate() =>
    RustLib.instance.api.crateApiGetNextProgressUpdate();

/// Send progress update (called from transaction building)
Future<String> sendProgressUpdate({required String progressData}) =>
    RustLib.instance.api.crateApiSendProgressUpdate(progressData: progressData);

/// Export C-compatible function for zecwalletlitelib to call
/// This allows the fallback progress system to emit stream events
Future<void> emitProgressUpdate({required int progress, required int total}) =>
    RustLib.instance.api
        .crateApiEmitProgressUpdate(progress: progress, total: total);

/// Initialization function to set up global progress sender for C bridge
Future<void> initProgressBridge() =>
    RustLib.instance.api.crateApiInitProgressBridge();
