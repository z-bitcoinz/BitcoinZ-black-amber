import 'package:json_annotation/json_annotation.dart';

part 'message_label.g.dart';

@JsonSerializable()
class MessageLabel {
  final int? id;
  final String txid;
  final String labelName;
  final String labelColor;
  final bool isAutoGenerated;
  final DateTime createdAt;
  final DateTime updatedAt;

  const MessageLabel({
    this.id,
    required this.txid,
    required this.labelName,
    this.labelColor = '#2196F3',
    this.isAutoGenerated = false,
    required this.createdAt,
    required this.updatedAt,
  });

  factory MessageLabel.fromJson(Map<String, dynamic> json) => _$MessageLabelFromJson(json);
  Map<String, dynamic> toJson() => _$MessageLabelToJson(this);

  /// Create a new message label with current timestamp
  factory MessageLabel.create({
    required String txid,
    required String labelName,
    String labelColor = '#2196F3',
    bool isAutoGenerated = false,
  }) {
    final now = DateTime.now();
    return MessageLabel(
      txid: txid,
      labelName: labelName,
      labelColor: labelColor,
      isAutoGenerated: isAutoGenerated,
      createdAt: now,
      updatedAt: now,
    );
  }

  /// Auto-generate label based on memo content
  factory MessageLabel.autoGenerate({
    required String txid,
    required String memo,
  }) {
    final labelName = _generateLabelFromMemo(memo);
    return MessageLabel.create(
      txid: txid,
      labelName: labelName,
      labelColor: _getColorForLabel(labelName),
      isAutoGenerated: true,
    );
  }

  /// Generate smart label from memo content
  static String _generateLabelFromMemo(String memo) {
    final lowerMemo = memo.toLowerCase().trim();
    
    // Business/Payment related
    if (lowerMemo.contains(RegExp(r'\b(payment|invoice|bill|receipt|purchase|order)\b'))) {
      return 'Payment';
    }
    if (lowerMemo.contains(RegExp(r'\b(salary|wage|payroll|income)\b'))) {
      return 'Salary';
    }
    if (lowerMemo.contains(RegExp(r'\b(refund|return|reimbursement)\b'))) {
      return 'Refund';
    }
    
    // Personal
    if (lowerMemo.contains(RegExp(r'\b(gift|birthday|christmas|holiday)\b'))) {
      return 'Gift';
    }
    if (lowerMemo.contains(RegExp(r'\b(loan|borrow|lend|debt)\b'))) {
      return 'Loan';
    }
    if (lowerMemo.contains(RegExp(r'\b(family|mom|dad|brother|sister|friend)\b'))) {
      return 'Personal';
    }
    
    // Services
    if (lowerMemo.contains(RegExp(r'\b(service|repair|maintenance|work)\b'))) {
      return 'Service';
    }
    if (lowerMemo.contains(RegExp(r'\b(donation|charity|tip)\b'))) {
      return 'Donation';
    }
    
    // Default to first few words or "Message"
    final words = lowerMemo.split(' ').take(2).join(' ');
    if (words.length > 2 && words.length <= 20) {
      return words.split(' ').map((w) => w.isNotEmpty ? w[0].toUpperCase() + w.substring(1) : '').join(' ');
    }
    
    return 'Message';
  }

  /// Get color for auto-generated labels
  static String _getColorForLabel(String labelName) {
    switch (labelName.toLowerCase()) {
      case 'payment':
        return '#4CAF50'; // Green
      case 'salary':
        return '#2196F3'; // Blue
      case 'refund':
        return '#FF9800'; // Orange
      case 'gift':
        return '#E91E63'; // Pink
      case 'loan':
        return '#9C27B0'; // Purple
      case 'personal':
        return '#00BCD4'; // Cyan
      case 'service':
        return '#607D8B'; // Blue Grey
      case 'donation':
        return '#795548'; // Brown
      default:
        return '#2196F3'; // Default blue
    }
  }

  /// Create a copy with updated values
  MessageLabel copyWith({
    int? id,
    String? txid,
    String? labelName,
    String? labelColor,
    bool? isAutoGenerated,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return MessageLabel(
      id: id ?? this.id,
      txid: txid ?? this.txid,
      labelName: labelName ?? this.labelName,
      labelColor: labelColor ?? this.labelColor,
      isAutoGenerated: isAutoGenerated ?? this.isAutoGenerated,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is MessageLabel &&
        other.txid == txid &&
        other.labelName == labelName;
  }

  @override
  int get hashCode => txid.hashCode ^ labelName.hashCode;

  @override
  String toString() {
    return 'MessageLabel(txid: $txid, labelName: $labelName, color: $labelColor)';
  }
}

/// Predefined label categories for quick selection
class MessageLabelCategories {
  static const List<Map<String, String>> predefined = [
    {'name': 'Payment', 'color': '#4CAF50'},
    {'name': 'Personal', 'color': '#00BCD4'},
    {'name': 'Business', 'color': '#2196F3'},
    {'name': 'Gift', 'color': '#E91E63'},
    {'name': 'Service', 'color': '#607D8B'},
    {'name': 'Refund', 'color': '#FF9800'},
    {'name': 'Donation', 'color': '#795548'},
    {'name': 'Important', 'color': '#F44336'},
  ];
  
  static List<String> get names => predefined.map((e) => e['name']!).toList();
  static List<String> get colors => predefined.map((e) => e['color']!).toList();
  
  static String getColorForName(String name) {
    final category = predefined.firstWhere(
      (e) => e['name'] == name,
      orElse: () => {'color': '#2196F3'},
    );
    return category['color']!;
  }
}
